# https://c15c01337.medium.com/nahamcon-ctf-2023-rsa-outro-crypto-fcfb72c8bf03
# https://onecompiler.com/python/42gavkvnk

from Crypto.Util.number import *
from math import isqrt, sqrt

#Given
e= 65537
phi= 292927367433510948901751902057717800692038691293351366163009654796102787183601223853665784238601655926920628800436003079044921928983307813012149143680956641439800408783429996002829316421340550469318295239640149707659994033143360850517185860496309968947622345912323183329662031340775767654881876683235701491291

ct= 40791470236110804733312817275921324892019927976655404478966109115157033048751614414177683787333122984170869148886461684367352872341935843163852393126653174874958667177632653833127408726094823976937236033974500273341920433616691535827765625224845089258529412235827313525710616060854484132337663369013424587861

# phi = p * q
# phi = p * (2p + 1)
# phi = 2p^2 + p
# phi - 2p^2 - p = 0
# 2p^2 + p - phi = 0

# a = 2
# b = 1
# c = -phi

# x = (-b +-sqaureroot(b^2-4ac))/2a
# x = -1 - sqrt(value)/4
value = 1 - 4 * -2 * phi
x = (-1 + isqrt(value)) // 4
y = 2 * x + 1
n = x * y 
print(n)
d= inverse(e, (x-1)*(y-1))
msg = pow(ct, d, n)
print(msg)
# msg.to_bytes(1, byteorder='big')
print("Flag:", long_to_bytes(msg))
